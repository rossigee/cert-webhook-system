name: Release

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/**'
  workflow_dispatch:

env:
  REGISTRY: harbor.golder.lan/library
  IMAGE_NAME: cert-webhook-system
  GO_VERSION: "1.25"

jobs:
  semantic-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.new_tag }}
      changelog: ${{ steps.semantic.outputs.changelog }}
      released: ${{ steps.semantic.outputs.released }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get semantic version
      id: semantic
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: master
        pre_release_branches: develop,beta
        default_bump: patch
        tag_prefix: v
        dry_run: false

  release-build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: semantic-version
    if: needs.semantic-version.outputs.released == 'true'
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux/amd64
          - goos: linux
            goarch: arm64
            platform: linux/arm64
          - goos: darwin
            goarch: amd64
            platform: darwin/amd64
          - goos: darwin
            goarch: arm64
            platform: darwin/arm64
          - goos: windows
            goarch: amd64
            platform: windows/amd64
            ext: .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        VERSION: ${{ needs.semantic-version.outputs.version }}
      run: |
        mkdir -p dist
        # Build controller
        go build -ldflags="-s -w -X main.version=${VERSION}" \
          -o dist/controller-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} \
          ./cmd/controller
        # Build webhook
        go build -ldflags="-s -w -X main.version=${VERSION}" \
          -o dist/webhook-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} \
          ./cmd/webhook

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  docker-release:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: [semantic-version, release-build]
    if: needs.semantic-version.outputs.released == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.semantic-version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-version.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.semantic-version.outputs.version }}
          type=raw,value=latest
        labels: |
          org.opencontainers.image.version=${{ needs.semantic-version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.semantic-version.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: spdx-json
        output-file: sbom-${{ needs.semantic-version.outputs.version }}.spdx.json

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-release
        path: sbom-${{ needs.semantic-version.outputs.version }}.spdx.json

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [semantic-version, release-build, docker-release]
    if: needs.semantic-version.outputs.released == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts/ -name "controller-*" -o -name "webhook-*" -o -name "checksums-*" | \
          xargs -I {} cp {} release-assets/
        # Create combined checksums
        cd release-assets
        sha256sum controller-* webhook-* > checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.semantic-version.outputs.version }}
        name: Release ${{ needs.semantic-version.outputs.version }}
        body: ${{ needs.semantic-version.outputs.changelog }}
        files: |
          release-assets/*
          artifacts/sbom-release/sbom-${{ needs.semantic-version.outputs.version }}.spdx.json
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true

  update-deployment:
    name: Update Deployment Manifests
    runs-on: ubuntu-latest
    needs: [semantic-version, docker-release]
    if: needs.semantic-version.outputs.released == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update Kubernetes manifests
      run: |
        # Update image tags in deployment manifests
        sed -i "s|image: .*${{ env.IMAGE_NAME }}:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-version.outputs.version }}|g" \
          deploy/kubernetes/*.yaml

    - name: Commit manifest updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deploy/kubernetes/*.yaml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update deployment manifests to ${{ needs.semantic-version.outputs.version }}"
          git push
        fi

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [semantic-version, update-deployment]
    if: always() && needs.semantic-version.outputs.released == 'true'
    
    steps:
    - name: Notify Slack
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Released ${{ env.IMAGE_NAME }} ${{ needs.semantic-version.outputs.version }}"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Failed to release ${{ env.IMAGE_NAME }} ${{ needs.semantic-version.outputs.version }}"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}